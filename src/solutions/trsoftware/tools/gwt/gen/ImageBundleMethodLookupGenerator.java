/*
 * Copyright 2021 TR Software Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package solutions.trsoftware.tools.gwt.gen;

import com.google.gwt.user.client.ui.AbstractImagePrototype;
import com.google.gwt.user.client.ui.ImageBundle;
import solutions.trsoftware.commons.client.images.flags.CountryFlagsBundle;

import java.io.PrintStream;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.SortedMap;
import java.util.TreeMap;

/**
 * Generates Java source code for an object that allows looking up
 * the AbstractImagePrototypes by their string name rather than calling the
 * method.  (This wouldn't be necessary if GWT supported reflection).
 *
 * <p style="color: #6495ed; font-weight: bold;">
 *   TODO: This seems to duplicate some of the functionality in {@link ImageBundleCodeGenerator}
 * </p>
 *
 * @author Alex, Nov 6, 2009
 *
 * @deprecated use {@link ClientBundleCodeGenerator} instead
 */
public class ImageBundleMethodLookupGenerator {

  public static void main(String[] args) {
    generateLookupSourceCode(CountryFlagsBundle.class, System.out);
  }


  /** Writes the bundle code to the given output device */
  public static void generateLookupSourceCode(Class bundleClass, PrintStream out) {
    // isolate the names of methods which return an AbstractImagePrototype
    SortedMap<String, String> stringToMethodMap = new TreeMap<String, String>();
    for (Method method : bundleClass.getMethods()) {
      if (method.getReturnType().equals(AbstractImagePrototype.class)) {
        String methodName = method.getName();
        ImageBundle.Resource resourceAnnotation = method.getAnnotation(ImageBundle.Resource.class);
        if (resourceAnnotation != null)
          stringToMethodMap.put(resourceAnnotation.value().split("\\.")[0], methodName); // use the part of the filename before the first dot
        else {
          stringToMethodMap.put(methodName, methodName);
        }
      }
    }

    generateLookup(stringToMethodMap, "clear", out); // TODO: the value "clear" applies specifically to CountryFlagsBundle.java: this should really be designated via a custom annotation in the bundle source code 
  }

  /**
   * Generates Java source code for an inner class of the image bundle that
   * allows translating strings to image prototypes, implemented using a HashMap.
   * @param defaultMethodName The AbstractImagePrototype method to be called
   * if the lookup fails.
   */
  public static void generateLookup(SortedMap<String, String> stringToMethodMap, String defaultMethodName, PrintStream out) {
    out.println("/** Generated by {@link " + ImageBundleMethodLookupGenerator.class.getName() + "} on " + new Date() + " */");
    out.println("  public static final class Lookup {");
    out.println("    private static Map<String, AbstractImagePrototype> lookupMap = new HashMap<String, AbstractImagePrototype>();");
    out.println("    static {");
    for (String name : stringToMethodMap.keySet()) {
      out.println("      lookupMap.put(\"" + name + "\", instance." + stringToMethodMap.get(name) + "());");
    }
    out.println("    }");
    out.println("    public static AbstractImagePrototype getByName(String name) {");
    out.println("      AbstractImagePrototype ret = lookupMap.get(name);");
    if (defaultMethodName != null) {
      out.println("      if (ret == null)");
      out.println("        ret = instance." + defaultMethodName + "();");
    }
    out.println("      return ret;");
    out.println("    }");
    out.println("  }");
  }

}